#!/usr/bin/perl
# $Id: TrackInfo.pl,v 1.10 2010-06-13 18:09:48 steve Exp $
# TrackInfo [options] infile... 
#	<title>extract track info</title>

### Extracts information about a song from its .flk) file
#	The default is to produce a simple property list of name=value assignments.
#       It is also able to substitute these into a template.



### Option variables and their defaults:

$debug = 0;					# debug

$verbose = 0;					# be verbose
$ok_tags = "cc pd";				# tags that indicate lyrics are ok to publish

$message = "";					# error message
$status = 0;					# result status code

### Variables set from song macros:

$title = "";
$subtitle = "";
$notice = "";
$license = "";
$dedication = "";
$description = "";
$tags = "";
$ok_tags = "pd cc";
$bad_tags = "wip not-ok";
$key = "";
$timing = "";
$created = "";
$cvsid = "";
$credits = "";
$performer = "";		# performer
$lyrics = "";			# lyricist
$music = "";			# composer
$arranger = "";			# arranger
			      ## derived:
$index_title = "";		# title without leading A/The
$filename  = "";		# filename.flk
$shortname = "";		# filename without .flk
$longname = '';			# title as a filename

$web_ok = '';			# is it ok to show lyrics on the web?



##########################################################################
### Main Program:
##########################################################################

$morefiles = "";

foreach $f (@ARGV) {
    if ($f =~ /^-/) {
	if ($f =~ /-v/)        { ++$verbose; }
     	elsif ($f =~ /--verbose/) { ++$verbose; }
	elsif ($f =~ /--?debug/)  { ++$debug; }
	elsif ($f =~ /-d/)  	  { ++$debug; }
	elsif ($f =~ /--template=(.+)/) { $template = $1;}
	elsif ($f =~ /--ok=(.+)/) {$ok_tags = $1;}
        else {
	    print $usage;
	    exit 1;
	}
    } elsif ($f =~ /\.flk/) {
	$filename = $f;
    }
}

getSongFileInfo($filename);
printMetadata();
exit($status);


##########################################################################


# entity encode (protect) a string
sub entityEncode {
    my ($s) = @_;
    $s =~ s/\&/&amp;/gs;
    $s =~ s/\>/&gt;/gs;
    $s =~ s/\</&lt;/gs;
    return $s;
}

sub trim {
    my ($s) = @_;
    $s =~ s/^[ \t\n]*//gs;
    $s =~ s/[ \t\n]*$//gs;
    return $s;
}

sub basename {
    my ($fn) = @_;
    $fn =~ m@([^/]*)$@;
    $fn = $1;
    $fn =~ /^(.+)\.[^.]*$/;
    return $1;
}

### getSongFileInfo($filename, $directory)
#	Get information from a song (.flk) file
#	The results are returned in global variables, which are assumed to
#	have been initialized already.  $directory defaults to $lyricDir
#
sub getSongFileInfo {
    my ($filename) = @_;

    # Extract the shortname from the filename:
    #   a leading numeric prefix separated by hyphens is ignored.
    #   everything after "." is ignored.  This allows track numbers
    #   and qualifiers (foo.a, etc.)
    $shortname = basename($filename);
    if ($shortname =~ /^(.+)\-\-/) {
	$shortname = $1;
    } elsif ($shortname =~ /^.+\.([^.]+)(\.|\-\-)?/) { 
	$shortname = $1;
    } elsif ($shortname =~ /^([a-z]*[0-9]+\-+)?([^.]+)\.?/) { 
	$shortname = $2;
    } 

    open(IN, $filename) || return 0;
    
    while (<IN>) {			
	if (/^[ \t]*$/) { }		# blank line
	elsif (/^[ \t]*\%.*$/) { }	# comment: ignore

    # Variable-setting macros:

	elsif (/\\begin.*\{song/)	{ begSong($_); }  # \begin{song}{title}
	elsif (/\\title/)  	{ $title	= getContent($_); }
	elsif (/\\subtitle/)  	{ $subtitle	= getContent($_); }
	elsif (/\\key/)  	{ $key		= getContent($_); }
	elsif (/\\tags/)	{ $tags		= getContent($_); }
	elsif (/\\category/)	{ $tags		= getContent($_); }
	elsif (/\\dedication/)	{ $dedication	= getContent($_); }
	elsif (/\\description/)	{ $description	= getContent($_); }
	elsif (/\\license/) 	{ $license	= getContent($_); }
	elsif (/\\timing/)  	{ $timing    = getContent($_); }
	elsif (/\\created/)  	{ $created   = getContent($_); }
	elsif (/\\notice/)  	{ $notice    = getContent($_); }
	elsif (/\\cvsid/)	{ $cvsid     = getContent($_); }
	elsif (/\\music/)	{ $music     = getContent($_); }
	elsif (/\\lyrics/)	{ $lyrics    = getContent($_); }
	elsif (/\\arranger/)	{ $arranger  = getContent($_); }
	elsif (/\\credits/)	{ $credits   = getContent($_); }
	elsif ($title) { 
	    # everything's at the top, so we have it all now.
	    last;
	}
    }
    close(IN);

    ## handle defaults and create derived information:
    
    $title = $shortname unless $title;

    $longname = $title;
    $longname =~ s/ /_/g;
    $longname =~ s/[^0-9a-zA-Z_]/-/g;

    # Set index_title (for sorting) from title
    $index_title = "" . $title;
    $index_title =~ s/^(An? |The )//;

    # If lyricist specified but composer isn't, assume they're the same
    $music  = $lyrics if ! $music && $lyrics;

    # If $credits isn't specified, construct it from $music and $lyrics
    if (! $credits) {
	$credits = last_name($lyrics);
	$credits .= "/" . last_name($music) if $music && ($music ne $lyrics);
    }

    for $t (split(' ', $ok_tags)) {
	if ($tags =~ /$t/) {
	    $web_ok = "true";
	    last;
	}
    }
    for $t (split(' ', $bad_tags)) {
	if ($tags =~ /$t/) {
	    $web_ok = "";
	    last;
	}
    }

    return 1;
}

### last_name($credits)
#	used in short-form credits.
#	special hacks to abbreviate "Trad." and 
#	eliminate a parenthesized phrase like (PD).
#
sub last_name {
    my ($name) = @_;
    if ($name =~ /[Tt]rad/) { $name = "Trad."; }
    #if ($name =~ /[^ ]+ (*)$/) { $name = $1; }
    if ($name =~ /([^ ]+)( +\([^\(]*\))?$/) { $name = $1; }
    return $name;
}

sub printMetadata {
    # Shell is name='value' -- need single quotes to prevent expansion
    print "shortname='$shortname'\n";
    print "longname='$longname'\n";
    print "filename='$filename'\n";
    print "title=\"$title\"\n";
    print "index_title=\"$index_title\"\n";
    print "track_number='$track_number'\n";
    print "subtitle='$subtitle'\n" if $subtitle;
    # can't (easily) have multiline items in shell format
    #print "dedication='$dedication'\n" if $dedication;
    #print "description='$description'\n" if $description;
    # === needs license and url
    print "license='$license'\n" if $license;
    print "lyrics='$lyrics'\n";
    print "music='$music'\n" if $music;
    print "arranger='$arranger'\n" if $arranger;
    print "timing='$timing'\n" if $timing;
    print "tags='$tags'\n" if $tags;
    print "key='$key'\n" if $key;
    print "credits='$credits'\n" if $credits;
    print "created='$created'\n" if $created;
    print "web_ok=$web_ok\n" if $web_ok;
}


########################################################################
###
### Macro handlers:
###
###	Each of the following routines handles a LaTeX macro.
###

### Begin a song:
###	Stash the title.
sub begSong {
    my ($line) = @_;		# input line
    $line =~ s/^.*song\}//;
    $title = getContent($line);	
}

### Remove LaTeX constructs.
###	This would be easier with a table.
sub deTeX {
    my ($txt) = @_;		# input line

    while ($txt =~ /\%/) {	# TeX comments eat the line break, too.
	$txt =~ s/\%.*$//;
	$txt .= <IN>;
     }
    while ($txt =~ /\{\\em[ \t\n]/
	   || $txt =~ /\{\\tt[ \t\n]/
	   || $txt =~ /\{\\bf[ \t\n]/) {
	# This will fail if there's a \bf and \em in one line in that order
	if ($txt =~ /\{\\em[ \t\n]/) {
	    $txt =~ s/\{\\em[ \t\n]/$EM/; 
	    while (! $txt =~ /\}/) { $txt .= <STDIN>; }
	    $txt =~ s/\}/$_EM/;
	}
	if ($txt =~ /\{\\tt[ \t\n]/) {
	    $txt =~ s/\{\\tt[ \t\n]/$TT/; 
	    while (! $txt =~ /\}/) { $txt .= <STDIN>; }
	    $txt =~ s/\}/$_TT/;
	}
	if ($txt =~ /\{\\bf[ \t\n]/) { 
	    $txt =~ s/\{\\bf[ \t\n]/$BF/; 
	    while (! $txt =~ /\}/) { $txt .= <STDIN>; }
	    $txt =~ s/\}/$_BF/;
	}
    }
    if ($html) { 
	$txt =~ s/\~/&nbsp;/g; 
	$txt =~ s/---/--/g;			# no &emdash;?
    } else { 
	$txt =~ s/\~/ /g;
	$txt =~ s/---/--/g;
    }
    while ($txt =~ /\\link\{[^}]+\}\{[^}]+\}/s) {
	if ($html) {
	    $txt =~ s/\\link\{([^}]+)\}\{([^}]+)\}/<a href="$1">$2<\/a>/s;
	} else {
	    $txt =~ s/\\link\{([^}]+)\}\{([^}]+)\}/$2/s;
	}
    }   
    $txt =~ s/\\&/$AMP/g;
    $txt =~ s/\\;/$SP/g;
    $txt =~ s/\\ /$SP/g;
    $txt =~ s/\\ldots/.../g;
    $txt =~ s/\\\\/$NL/g;

    $txt =~ s/\\min/m/g;
    $txt =~ s/\\capo/ capo/g;

    return $txt
}

### getContent(line): get what's between macro braces.
#
sub getContent {
    my ($line) = @_;		# input line
    # Throw away everything up to the "{"
    $line =~ s/^[^{]*\{//;
    $line = deTeX($line);
    # Suck in more lines if we haven't seen the closing brace
    # NOTE that we have to use the same file handle as getSongInfo!!
    while ($line !~ /\}/) { $line .= <IN>; $line = deTeX($line); }
    # Throw away everything after the "}"
    $line =~ s/\}[^}]*$//;
    $line =~ s/\n$//;
    return $line;
}

