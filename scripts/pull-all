#!/bin/bash
#  Recursively find all directories with git repos, and try to pull them.

GIT_HOST=savitzky.net
NO_OP=false
TIME=0
VERBOSE=false
default_s='default '
default_t='default '

usage () {
    cat <<EOF
$0 [options]
   Recursively find all git repos; try to pull if origin matches ${GIT_HOST}
   options:
      -h or --help	   - print this message and exit
      -n or --no-op  	   - print directories without pulling
      -s or --site SITE    - site to pull from (${default_s}${GIT_HOST}; can be a basic regex)
      -t or --time TIME    - wait time seconds between pulls (${default_t}$TIME)
      -v or --verbose	   - print more information 
EOF
}

while [[ ! -z "$1" ]]; do
    case $1 in
	(-h | --help)
	    usage; exit
	    ;;
	(-n | --no-op)
	    NO_OP=true
	    shift
	    ;;
	(-s | --site)
	    shift
	    GIT_HOST="$1"
	    default_s=
	    shift
	    ;;
	(-t | --time)
	    shift
	    TIME=$1
	    default_t=
	    shift
	    ;;
	(-v | --verbose)
	    VERBOSE=true
	    shift
	    ;;
	(*)
	    usage
	    exit
	    ;;
    esac
done

has_origin () {
    [[ -d $1 ]] && (git -C $1 remote | grep -q origin)
}

get_origin () {
    git -C $1 remote get-url origin
}

flags="${*:---ff-only}"
repos=`find . -name .git -print | sort`
for f in $repos; do
    if has_origin $f; then
	if get_origin $f | grep -q "$GIT_HOST"; then
	    echo -ne $(dirname $f)"\t"
	    $NO_OP || git pull $flags
	    $NO_OP && echo
	    sleep $TIME # some sites restrict you to some small number of ssh connections
    	    # in a row, so throttle back.  Better to use controlmaster if you can
	else
	    $VERBOSE && echo -e $(dirname $f)"\t ***" origin not $GIT_HOST
	fi
    elif [[ -d $f ]]; then
	$VERBOSE && echo -e $(dirname $f)"\t ***" no origin
    else
	$VERBOSE && echo -e $(dirname $f)"\t ***" .git not a directory
    fi
done
